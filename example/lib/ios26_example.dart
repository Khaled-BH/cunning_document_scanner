import 'package:flutter/material.dart';
import 'package:cunning_document_scanner/cunning_document_scanner.dart';
import 'dart:io';
import 'dart:convert';

/// Example demonstrating iOS 26 features
/// - Liquid Glass UI integration
/// - RecognizeDocumentsRequest API
/// - Table detection
/// - Data extraction (emails, phone numbers, etc.)
class iOS26Example extends StatefulWidget {
  const iOS26Example({Key? key}) : super(key: key);

  @override
  State<iOS26Example> createState() => _iOS26ExampleState();
}

class _iOS26ExampleState extends State<iOS26Example> {
  List<String> _scannedImages = [];
  List<Map<String, dynamic>> _metadata = [];
  bool _isLoading = false;

  /// Scan documents with iOS 26 advanced features
  Future<void> _scanDocumentsWithiOS26Features() async {
    setState(() {
      _isLoading = true;
      _scannedImages = [];
      _metadata = [];
    });

    try {
      // Configure iOS 26 scanner options
      final options = IosScannerOptions(
        imageFormat: IosImageFormat.jpg,
        jpgCompressionQuality: 0.8,
        // Enable iOS 26 RecognizeDocumentsRequest API
        useRecognizeDocumentsRequest: true,
        // Support multiple languages
        recognitionLanguages: ['en-US', 'es-ES', 'fr-FR'],
        // Enable all detection features
        enableTableDetection: true,
        enableListDetection: true,
        enableDataDetection: true,
      );

      // Get scanned documents with metadata
      final result = await CunningDocumentScanner.getPicturesWithMetadata(
        iosScannerOptions: options,
      );

      if (result != null) {
        setState(() {
          _scannedImages = List<String>.from(result['images'] ?? []);
          _metadata = List<Map<String, dynamic>>.from(result['metadata'] ?? []);
        });

        // Load metadata from JSON files if available
        await _loadMetadataFiles();
      }
    } catch (e) {
      _showError('Scanning failed: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Scan documents with basic settings (backward compatible)
  Future<void> _scanDocumentsBasic() async {
    setState(() {
      _isLoading = true;
      _scannedImages = [];
      _metadata = [];
    });

    try {
      final images = await CunningDocumentScanner.getPictures(
        iosScannerOptions: IosScannerOptions(
          imageFormat: IosImageFormat.png,
        ),
      );

      if (images != null) {
        setState(() {
          _scannedImages = images;
        });
      }
    } catch (e) {
      _showError('Scanning failed: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Load metadata JSON files generated by iOS 26 recognition
  Future<void> _loadMetadataFiles() async {
    for (int i = 0; i < _scannedImages.length; i++) {
      final imagePath = _scannedImages[i];
      final metadataPath = imagePath.replaceAll(
        RegExp(r'\.(jpg|png)$'),
        '-metadata.json',
      );

      final metadataFile = File(metadataPath);
      if (await metadataFile.exists()) {
        try {
          final jsonString = await metadataFile.readAsString();
          final metadata = jsonDecode(jsonString) as Map<String, dynamic>;

          if (i < _metadata.length) {
            _metadata[i] = metadata;
          } else {
            _metadata.add(metadata);
          }
        } catch (e) {
          print('Failed to load metadata for $imagePath: $e');
        }
      }
    }
    setState(() {});
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('iOS 26 Document Scanner'),
        backgroundColor: Colors.blue,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                _buildControlPanel(),
                Expanded(child: _buildResultsView()),
              ],
            ),
    );
  }

  Widget _buildControlPanel() {
    return Container(
      padding: const EdgeInsets.all(16),
      color: Colors.grey[100],
      child: Column(
        children: [
          ElevatedButton.icon(
            onPressed: _scanDocumentsWithiOS26Features,
            icon: const Icon(Icons.document_scanner),
            label: const Text('Scan with iOS 26 Features'),
            style: ElevatedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
              backgroundColor: Colors.blue,
            ),
          ),
          const SizedBox(height: 8),
          OutlinedButton.icon(
            onPressed: _scanDocumentsBasic,
            icon: const Icon(Icons.camera),
            label: const Text('Basic Scan (Compatible)'),
            style: OutlinedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
            ),
          ),
          if (_scannedImages.isNotEmpty) ...[
            const SizedBox(height: 16),
            Text(
              '${_scannedImages.length} document(s) scanned',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildResultsView() {
    if (_scannedImages.isEmpty) {
      return const Center(
        child: Text('No documents scanned yet'),
      );
    }

    return ListView.builder(
      itemCount: _scannedImages.length,
      itemBuilder: (context, index) {
        return _buildDocumentCard(index);
      },
    );
  }

  Widget _buildDocumentCard(int index) {
    final imagePath = _scannedImages[index];
    final metadata = index < _metadata.length ? _metadata[index] : null;

    return Card(
      margin: const EdgeInsets.all(8),
      child: ExpansionTile(
        title: Text('Document ${index + 1}'),
        subtitle: Text(imagePath.split('/').last),
        children: [
          // Display scanned image
          Image.file(
            File(imagePath),
            height: 200,
            fit: BoxFit.contain,
          ),
          if (metadata != null) ...[
            const Divider(),
            _buildMetadataView(metadata),
          ],
        ],
      ),
    );
  }

  Widget _buildMetadataView(Map<String, dynamic> metadata) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'iOS 26 Recognition Results:',
            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
          ),
          const SizedBox(height: 8),

          // Full text
          if (metadata['transcript'] != null) ...[
            const Text('Full Text:', style: TextStyle(fontWeight: FontWeight.bold)),
            Text(metadata['transcript'] as String),
            const SizedBox(height: 8),
          ],

          // Language
          if (metadata['language'] != null) ...[
            Text('Language: ${metadata['language']}'),
            const SizedBox(height: 8),
          ],

          // Tables
          if (metadata['tables'] != null &&
              (metadata['tables'] as List).isNotEmpty) ...[
            const Text('Tables:', style: TextStyle(fontWeight: FontWeight.bold)),
            ..._buildTablesView(metadata['tables'] as List),
            const SizedBox(height: 8),
          ],

          // Detected data
          if (metadata['detectedData'] != null &&
              (metadata['detectedData'] as List).isNotEmpty) ...[
            const Text('Detected Data:', style: TextStyle(fontWeight: FontWeight.bold)),
            ..._buildDetectedDataView(metadata['detectedData'] as List),
          ],
        ],
      ),
    );
  }

  List<Widget> _buildTablesView(List tables) {
    return tables.map<Widget>((table) {
      final rowCount = table['rowCount'] ?? 0;
      final columnCount = table['columnCount'] ?? 0;

      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('  Table: $rowCount rows Ã— $columnCount columns'),
          const SizedBox(height: 4),
        ],
      );
    }).toList();
  }

  List<Widget> _buildDetectedDataView(List detectedData) {
    return detectedData.map<Widget>((data) {
      final text = data['text'] ?? '';
      final type = data['type'] ?? 'unknown';

      IconData icon;
      Color color;

      switch (type) {
        case 'emailAddress':
          icon = Icons.email;
          color = Colors.blue;
          break;
        case 'phoneNumber':
          icon = Icons.phone;
          color = Colors.green;
          break;
        case 'url':
          icon = Icons.link;
          color = Colors.purple;
          break;
        default:
          icon = Icons.info;
          color = Colors.grey;
      }

      return ListTile(
        dense: true,
        leading: Icon(icon, color: color, size: 20),
        title: Text(text),
        subtitle: Text(type),
      );
    }).toList();
  }
}
